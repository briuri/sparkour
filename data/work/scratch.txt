#########
# Links #
#########

Shuffle:
	http://blog.cloudera.com/blog/2015/05/working-with-apache-spark-or-how-i-learned-to-stop-worrying-and-love-the-shuffle/ 
HDFS:
	http://www.ccs.neu.edu/home/cbw/spark.html
Standalone/YARN/Mesos:
	http://stackoverflow.com/questions/28664834/which-cluster-type-should-i-choose-for-spark
	https://www.quora.com/How-does-YARN-compare-to-Mesos
Uber JAR with Ant:	
	http://www.oooogleeee.com/education/apache-ant-tutorial/ant-create-fat-jar-file/
	
##################
# Code Fragments #
##################
		
	// Create a DataFrame from a JDBC database table.
	// (Don't forget to include JAR dependencies for your JDBC client)
	Properties properties = new Properties();
	properties.setProperty("user", "db_user");
	properties.setProperty("password", passwordFromExternalPropertiesFile);
	DataFrame dataFrame = sqlContext.read().jdbc("jdbc:mysql://localhost:3306/sparkour", "my_table", properties);
	
	# Create a DataFrame from a JDBC database table.
	# (Don't forget to include JAR dependencies for your JDBC client) 
	data_frame = sql_context.read.jdbc("jdbc:mysql://localhost:3306/sparkour", "my_table",
		properties={"user": "db_user", "password": password_from_external_properties_file}
	)
	
	# Create a DataFrame from a JDBC database table.
	# (Don't forget to include RJDBC library) 
	urlString = paste("jdbc:mysql://localhost:3306/sparkour?user=db_user&password=", passwordFromExternalPropertiesFile, sep="")
	dataFrame <- read.df(sqlContext, source="jdbc", url=urlString)
	
	// Create a DataFrame from a JDBC database table.
	// (Don't forget to include JAR dependencies for your JDBC client) 
	val properties = new java.util.Properties();
	properties.setProperty("user", "db_user");
	properties.setProperty("password", passwordFromExternalPropertiesFile);
	val dataFrame = sqlContext.read.jdbc("jdbc:mysql://localhost:3306/sparkour", "my_table", properties)
	
	// Save a DataFrame to a JDBC database table.
	// (Don't forget to include JAR dependencies for your JDBC client)
	Properties properties = new Properties();
	properties.setProperty("user", "db_user");
	properties.setProperty("password", passwordFromExternalPropertiesFile);
	dataFrame.write().mode(SaveMode.ErrorIfExists).jdbc("jdbc:mysql://localhost:3306/sparkour", "my_table", properties);
							
	# Save a DataFrame to a JDBC database table.
	# (Don't forget to include JAR dependencies for your JDBC client) 
	data_frame.write.jdbc("jdbc:mysql://localhost:3306/sparkour", "my_table",
		mode="error",
		properties={"user": "db_user", "password": password_from_external_properties_file}
	)
				
	# Save a DataFrame to a JDBC database table.
	# (Don't forget to include RJDBC library) 
	urlString = paste("jdbc:mysql://localhost:3306/sparkour?user=db_user&password=", passwordFromExternalPropertiesFile, sep="")
	write.df(dataFrame, source="jdbc", url=urlString)
	
	// Save a DataFrame to a JDBC database table.
	// (Don't forget to include JAR dependencies for your JDBC client) 
	val properties = new java.util.Properties();
	properties.setProperty("user", "db_user");
	properties.setProperty("password", passwordFromExternalPropertiesFile);
	dataFrame.write.mode(SaveMode.ErrorIfExists).jdbc("jdbc:mysql://localhost:3306/sparkour", "my_table", properties)
    